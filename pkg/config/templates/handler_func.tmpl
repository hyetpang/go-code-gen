{{define "handler_func.tmpl"}}
{{end}}

// @Summary      {{.DocSummary}}
// @Description  {{.DocDesc}}
// @Tags         {{.DocTag}}
// @Produce      json
// @Param        {{.ReqParamType}}  {{.ReqParamType}}    msg.{{.DModelName}}{{.MethodName}}Req  true  "{{.ReqParamType}}参数"
// @Success      200   {{.RspParamType}}  msg.{{.DModelName}}{{.MethodName}}Rsp
// @Router       {{.DocUrl}} [{{.DocUrlMethod}}]
func ({{.ModelName}}Handler *{{.ModelName}}Handler) {{.MethodName}}(ctx *gin.Context) {
	req := new(msg.{{.DModelName}}{{.MethodName}}Req)
	commonLog := logs.With(common.GenZapNanoId,zap.String("ip",ctx.ClientIP()), zap.String("url","{{.DocUrlMethod}} {{.DocUrl}}"))
	if err := ctx.ShouldBind(req); err != nil {
		commonLog.Error("参数校验失败", zap.Error(err))
		common.Wrap(ctx).Fail(base.CodeErrParamsInvalid)
		return
	}
	commonLog = commonLog.With(zap.Object("req", common.ObjectMarshaler(func(oe zapcore.ObjectEncoder) {
		// TODO 请求参数
	})))
	commonLog.Info("开始处理请求")
	data, codeErr := {{.ModelName}}Handler.{{.ModelName}}Service.{{.MethodName}}(req,commonLog)
	if codeErr != nil {
		commonLog.Warn("请求处理出错", zap.String("msg", codeErr.GetMsg()), zap.Uint("code", codeErr.GetCode()))
		common.Wrap(ctx).Fail(codeErr)
		return
	}
	commonLog.Info("请求处理成功", zap.Any("rsp", data))
	common.Wrap(ctx).Success(data)
}
